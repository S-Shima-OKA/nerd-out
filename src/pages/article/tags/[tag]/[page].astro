---
import { itemSort, releasedSort, urlReplace } from '../../../../utils/util';
import Layout from '../../../../layouts/Layout.astro';
import PageTitle from '../../../../components/PageTitle.astro';
import BlogPost from '../../../../components/BlogPost.astro';

export async function getStaticPaths({paginate}) {
  const allPosts = await Astro.glob('../../_testItems/*.md');
  const allTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];
  // const extendArray = Array(24).fill().map((_, i) => allPosts[i % allPosts.length]);
  return allTags.flatMap((tag) => {
    const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
    const releasedPosts = releasedSort(filteredPosts);

    return paginate(releasedPosts, {
      params: { tag },
      props: { posts: itemSort(releasedPosts) },
      pageSize: 6
    });
  });
}
const { page } = Astro.props;
const { pathname } = Astro.url;
const params = Astro.params;
---
<Layout title=`${params.tag.charAt(0).toUpperCase() + params.tag.slice(1).toLowerCase()}の記事 ${page.currentPage}/${page.lastPage}` desc="これまでの記事一覧。">
    <PageTitle title=`${params.tag.charAt(0).toUpperCase() + params.tag.slice(1).toLowerCase()}` lead=`「${params.tag.charAt(0).toUpperCase() + params.tag.slice(1).toLowerCase()}」の記事一覧` />
    <!-- Card Blog -->
    <BlogPost 
    sortFunc={page.data} 
    isTotal={page.total}
    isPrev={page.url.prev}
    isNext={page.url.next}
    isCurrentPage={page.currentPage}
    isPageNate={urlReplace(pathname)} />
</Layout>